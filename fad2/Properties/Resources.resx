<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SearchForFile" xml:space="preserve">
    <value>Search for File...</value>
  </data>
  <data name="SavingSettings" xml:space="preserve">
    <value>Saving Settings</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File not found</value>
  </data>
  <data name="LoadingSettings" xml:space="preserve">
    <value>Loading Settings</value>
  </data>
  <data name="ReadyToCopy" xml:space="preserve">
    <value>Done reading File Information from Flashair. Ready to copy new files.</value>
  </data>
  <data name="ReadingThumbnailsFromFlashair" xml:space="preserve">
    <value>Reading Thumbnails for Images on Flashair</value>
  </data>
  <data name="ReadingThumnailNo" xml:space="preserve">
    <value>Reading Thumbnails for Images on Flashair [{0} of {1}]</value>
  </data>
  <data name="ReadingFlashAirInfoAtPath" xml:space="preserve">
    <value>Reading information from files from Flashair at path '{0}'</value>
  </data>
  <data name="ReadingInfoFromFilesAtPath" xml:space="preserve">
    <value>Reading information from {0} files from Flashair at path '{1}'</value>
  </data>
  <data name="ErrorDownloadingFilelist" xml:space="preserve">
    <value>Failed downloading Filelist. Ignore this folder and continue with next one? 
[ignore=continue with next folder, abort=abort all downloads, retry=retry downloading this folder]</value>
  </data>
  <data name="ErrorFlashairGenericTitle" xml:space="preserve">
    <value>FlashAir issues</value>
  </data>
  <data name="ErrorBlameToshiba" xml:space="preserve">
    <value>Sorry about this. But it isn't my fault. Blame Toshiba :)</value>
  </data>
  <data name="ErrorBlameTitle" xml:space="preserve">
    <value>That's a bit embarrassing </value>
  </data>
  <data name="CopyingFiles" xml:space="preserve">
    <value>Copying files...</value>
  </data>
  <data name="CopyFileOfAtSpeed" xml:space="preserve">
    <value>Copy file {0} of {1}: [{2}] Current Speed:{3} </value>
  </data>
  <data name="DoneCopying" xml:space="preserve">
    <value>Done copying.</value>
  </data>
  <data name="ReadLocalDir" xml:space="preserve">
    <value>Loading local directory</value>
  </data>
  <data name="ConnectionSuccess" xml:space="preserve">
    <value>Connection succeeded</value>
  </data>
  <data name="ConnectionTry" xml:space="preserve">
    <value>Connecting (Attempt {0})</value>
  </data>
  <data name="AbortCopy" xml:space="preserve">
    <value>Abort copying</value>
  </data>
  <data name="OperationCancelled" xml:space="preserve">
    <value>Operation cancelled</value>
  </data>
  <data name="CopyFinished" xml:space="preserve">
    <value>Copy finished</value>
  </data>
  <data name="CannotFindFlashairTitle" xml:space="preserve">
    <value>Flashair cannot be found anymore</value>
  </data>
  <data name="CannotFindFlashairMessage" xml:space="preserve">
    <value>Flashair cannot be found anymore. This usually means that the card has gone offline. Re-Power your camera and try again.</value>
  </data>
  <data name="FailedDownloadingFile" xml:space="preserve">
    <value>Failed downloading File '{0}. This will be ignored for now. (Press Cancel to abort operation, OK continues with next file) </value>
  </data>
  <data name="AboutMe" xml:space="preserve">
    <value>The FlashAirDownloader 2 is a Tool that allows you to download Images from your FlashAir SD-Card.
The Author(s) of this program are not related to Toshiba. Feel free to use and modify this program that it fits your needs. Limitations and Warranty - stuff can be found under the License section.

If you really love this tool feel free to give some love. If you want to give even more, press the button to the left :)</value>
  </data>
  <data name="OverWriteTitle" xml:space="preserve">
    <value>Overwrite local file?</value>
  </data>
  <data name="OverwriteText" xml:space="preserve">
    <value>File '{0}' already exists. Overwrite?</value>
  </data>
  <data name="LoadingInfo" xml:space="preserve">
    <value>Loading Flashair - Information</value>
  </data>
  <data name="LoadingThumbnails" xml:space="preserve">
    <value>Loading Thumbnails</value>
  </data>
  <data name="CopyToFlashAir" xml:space="preserve">
    <value>Copying files to FlashAir</value>
  </data>
</root>